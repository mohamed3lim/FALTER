// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrfData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrfData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_exchange_2eproto() {
  protobuf_AddDesc_exchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exchange.proto");
  GOOGLE_CHECK(file != NULL);
  Image_descriptor_ = file->message_type(0);
  static const int Image_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, input_pmd_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  SrfData_descriptor_ = file->message_type(1);
  static const int SrfData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_gnd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_rhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_lhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_front_rhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_front_ctr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_front_lhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_rear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, srf_ceiling_),
  };
  SrfData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrfData_descriptor_,
      SrfData::default_instance_,
      SrfData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrfData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrfData));
  Data_descriptor_ = file->message_type(2);
  static const int Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, srfdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, zpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, currangle_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrfData_descriptor_, &SrfData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exchange_2eproto() {
  delete Image::default_instance_;
  delete Image_reflection_;
  delete SrfData::default_instance_;
  delete SrfData_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
}

void protobuf_AddDesc_exchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016exchange.proto\"\032\n\005Image\022\021\n\tinput_pmd\030\001"
    " \003(\002\"\250\001\n\007SrfData\022\017\n\007srf_gnd\030\001 \001(\001\022\017\n\007srf"
    "_rhs\030\002 \001(\001\022\017\n\007srf_lhs\030\003 \001(\001\022\025\n\rsrf_front"
    "_rhs\030\004 \001(\001\022\025\n\rsrf_front_ctr\030\005 \001(\001\022\025\n\rsrf"
    "_front_lhs\030\006 \001(\001\022\020\n\010srf_rear\030\007 \001(\001\022\023\n\013sr"
    "f_ceiling\030\010 \001(\001\"u\n\004Data\022\025\n\005image\030\001 \003(\0132\006"
    ".Image\022\031\n\007srfData\030\002 \003(\0132\010.SrfData\022\014\n\004xPo"
    "s\030\003 \001(\001\022\014\n\004yPos\030\004 \001(\001\022\014\n\004zPos\030\005 \001(\001\022\021\n\tc"
    "urrAngle\030\006 \001(\001", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exchange.proto", &protobuf_RegisterTypes);
  Image::default_instance_ = new Image();
  SrfData::default_instance_ = new SrfData();
  Data::default_instance_ = new Data();
  Image::default_instance_->InitAsDefaultInstance();
  SrfData::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exchange_2eproto {
  StaticDescriptorInitializer_exchange_2eproto() {
    protobuf_AddDesc_exchange_2eproto();
  }
} static_descriptor_initializer_exchange_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Image::kInputPmdFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  input_pmd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float input_pmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_input_pmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_input_pmd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_input_pmd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_input_pmd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float input_pmd = 1;
  for (int i = 0; i < this->input_pmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->input_pmd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float input_pmd = 1;
  for (int i = 0; i < this->input_pmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->input_pmd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  // repeated float input_pmd = 1;
  {
    int data_size = 0;
    data_size = 4 * this->input_pmd_size();
    total_size += 1 * this->input_pmd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_pmd_.MergeFrom(from.input_pmd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    input_pmd_.Swap(&other->input_pmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrfData::kSrfGndFieldNumber;
const int SrfData::kSrfRhsFieldNumber;
const int SrfData::kSrfLhsFieldNumber;
const int SrfData::kSrfFrontRhsFieldNumber;
const int SrfData::kSrfFrontCtrFieldNumber;
const int SrfData::kSrfFrontLhsFieldNumber;
const int SrfData::kSrfRearFieldNumber;
const int SrfData::kSrfCeilingFieldNumber;
#endif  // !_MSC_VER

SrfData::SrfData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrfData::InitAsDefaultInstance() {
}

SrfData::SrfData(const SrfData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrfData::SharedCtor() {
  _cached_size_ = 0;
  srf_gnd_ = 0;
  srf_rhs_ = 0;
  srf_lhs_ = 0;
  srf_front_rhs_ = 0;
  srf_front_ctr_ = 0;
  srf_front_lhs_ = 0;
  srf_rear_ = 0;
  srf_ceiling_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrfData::~SrfData() {
  SharedDtor();
}

void SrfData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrfData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrfData_descriptor_;
}

const SrfData& SrfData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

SrfData* SrfData::default_instance_ = NULL;

SrfData* SrfData::New() const {
  return new SrfData;
}

void SrfData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srf_gnd_ = 0;
    srf_rhs_ = 0;
    srf_lhs_ = 0;
    srf_front_rhs_ = 0;
    srf_front_ctr_ = 0;
    srf_front_lhs_ = 0;
    srf_rear_ = 0;
    srf_ceiling_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double srf_gnd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_gnd_)));
          set_has_srf_gnd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_srf_rhs;
        break;
      }

      // optional double srf_rhs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_rhs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_rhs_)));
          set_has_srf_rhs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_srf_lhs;
        break;
      }

      // optional double srf_lhs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_lhs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_lhs_)));
          set_has_srf_lhs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_srf_front_rhs;
        break;
      }

      // optional double srf_front_rhs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_front_rhs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_front_rhs_)));
          set_has_srf_front_rhs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_srf_front_ctr;
        break;
      }

      // optional double srf_front_ctr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_front_ctr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_front_ctr_)));
          set_has_srf_front_ctr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_srf_front_lhs;
        break;
      }

      // optional double srf_front_lhs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_front_lhs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_front_lhs_)));
          set_has_srf_front_lhs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_srf_rear;
        break;
      }

      // optional double srf_rear = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_rear_)));
          set_has_srf_rear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_srf_ceiling;
        break;
      }

      // optional double srf_ceiling = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_srf_ceiling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &srf_ceiling_)));
          set_has_srf_ceiling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double srf_gnd = 1;
  if (has_srf_gnd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->srf_gnd(), output);
  }

  // optional double srf_rhs = 2;
  if (has_srf_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->srf_rhs(), output);
  }

  // optional double srf_lhs = 3;
  if (has_srf_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->srf_lhs(), output);
  }

  // optional double srf_front_rhs = 4;
  if (has_srf_front_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->srf_front_rhs(), output);
  }

  // optional double srf_front_ctr = 5;
  if (has_srf_front_ctr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->srf_front_ctr(), output);
  }

  // optional double srf_front_lhs = 6;
  if (has_srf_front_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->srf_front_lhs(), output);
  }

  // optional double srf_rear = 7;
  if (has_srf_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->srf_rear(), output);
  }

  // optional double srf_ceiling = 8;
  if (has_srf_ceiling()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->srf_ceiling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrfData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double srf_gnd = 1;
  if (has_srf_gnd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->srf_gnd(), target);
  }

  // optional double srf_rhs = 2;
  if (has_srf_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->srf_rhs(), target);
  }

  // optional double srf_lhs = 3;
  if (has_srf_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->srf_lhs(), target);
  }

  // optional double srf_front_rhs = 4;
  if (has_srf_front_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->srf_front_rhs(), target);
  }

  // optional double srf_front_ctr = 5;
  if (has_srf_front_ctr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->srf_front_ctr(), target);
  }

  // optional double srf_front_lhs = 6;
  if (has_srf_front_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->srf_front_lhs(), target);
  }

  // optional double srf_rear = 7;
  if (has_srf_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->srf_rear(), target);
  }

  // optional double srf_ceiling = 8;
  if (has_srf_ceiling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->srf_ceiling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrfData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double srf_gnd = 1;
    if (has_srf_gnd()) {
      total_size += 1 + 8;
    }

    // optional double srf_rhs = 2;
    if (has_srf_rhs()) {
      total_size += 1 + 8;
    }

    // optional double srf_lhs = 3;
    if (has_srf_lhs()) {
      total_size += 1 + 8;
    }

    // optional double srf_front_rhs = 4;
    if (has_srf_front_rhs()) {
      total_size += 1 + 8;
    }

    // optional double srf_front_ctr = 5;
    if (has_srf_front_ctr()) {
      total_size += 1 + 8;
    }

    // optional double srf_front_lhs = 6;
    if (has_srf_front_lhs()) {
      total_size += 1 + 8;
    }

    // optional double srf_rear = 7;
    if (has_srf_rear()) {
      total_size += 1 + 8;
    }

    // optional double srf_ceiling = 8;
    if (has_srf_ceiling()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrfData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrfData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrfData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrfData::MergeFrom(const SrfData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srf_gnd()) {
      set_srf_gnd(from.srf_gnd());
    }
    if (from.has_srf_rhs()) {
      set_srf_rhs(from.srf_rhs());
    }
    if (from.has_srf_lhs()) {
      set_srf_lhs(from.srf_lhs());
    }
    if (from.has_srf_front_rhs()) {
      set_srf_front_rhs(from.srf_front_rhs());
    }
    if (from.has_srf_front_ctr()) {
      set_srf_front_ctr(from.srf_front_ctr());
    }
    if (from.has_srf_front_lhs()) {
      set_srf_front_lhs(from.srf_front_lhs());
    }
    if (from.has_srf_rear()) {
      set_srf_rear(from.srf_rear());
    }
    if (from.has_srf_ceiling()) {
      set_srf_ceiling(from.srf_ceiling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrfData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrfData::CopyFrom(const SrfData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrfData::IsInitialized() const {

  return true;
}

void SrfData::Swap(SrfData* other) {
  if (other != this) {
    std::swap(srf_gnd_, other->srf_gnd_);
    std::swap(srf_rhs_, other->srf_rhs_);
    std::swap(srf_lhs_, other->srf_lhs_);
    std::swap(srf_front_rhs_, other->srf_front_rhs_);
    std::swap(srf_front_ctr_, other->srf_front_ctr_);
    std::swap(srf_front_lhs_, other->srf_front_lhs_);
    std::swap(srf_rear_, other->srf_rear_);
    std::swap(srf_ceiling_, other->srf_ceiling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrfData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrfData_descriptor_;
  metadata.reflection = SrfData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kImageFieldNumber;
const int Data::kSrfDataFieldNumber;
const int Data::kXPosFieldNumber;
const int Data::kYPosFieldNumber;
const int Data::kZPosFieldNumber;
const int Data::kCurrAngleFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  zpos_ = 0;
  currangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
    zpos_ = 0;
    currangle_ = 0;
  }
  image_.Clear();
  srfdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Image image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_image;
        if (input->ExpectTag(18)) goto parse_srfData;
        break;
      }

      // repeated .SrfData srfData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srfData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srfdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srfData;
        if (input->ExpectTag(25)) goto parse_xPos;
        break;
      }

      // optional double xPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_yPos;
        break;
      }

      // optional double yPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_zPos;
        break;
      }

      // optional double zPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_zPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zpos_)));
          set_has_zpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_currAngle;
        break;
      }

      // optional double currAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currangle_)));
          set_has_currangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(i), output);
  }

  // repeated .SrfData srfData = 2;
  for (int i = 0; i < this->srfdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->srfdata(i), output);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xpos(), output);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ypos(), output);
  }

  // optional double zPos = 5;
  if (has_zpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->zpos(), output);
  }

  // optional double currAngle = 6;
  if (has_currangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->currangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(i), target);
  }

  // repeated .SrfData srfData = 2;
  for (int i = 0; i < this->srfdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->srfdata(i), target);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xpos(), target);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ypos(), target);
  }

  // optional double zPos = 5;
  if (has_zpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->zpos(), target);
  }

  // optional double currAngle = 6;
  if (has_currangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->currangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional double xPos = 3;
    if (has_xpos()) {
      total_size += 1 + 8;
    }

    // optional double yPos = 4;
    if (has_ypos()) {
      total_size += 1 + 8;
    }

    // optional double zPos = 5;
    if (has_zpos()) {
      total_size += 1 + 8;
    }

    // optional double currAngle = 6;
    if (has_currangle()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Image image = 1;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .SrfData srfData = 2;
  total_size += 1 * this->srfdata_size();
  for (int i = 0; i < this->srfdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srfdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  srfdata_.MergeFrom(from.srfdata_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_zpos()) {
      set_zpos(from.zpos());
    }
    if (from.has_currangle()) {
      set_currangle(from.currangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    image_.Swap(&other->image_);
    srfdata_.Swap(&other->srfdata_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(zpos_, other->zpos_);
    std::swap(currangle_, other->currangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
